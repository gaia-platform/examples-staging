#include <stdlib.h>
#include <iostream>
#include <vector>

// Rule examples. These examples are in two categories. The first shows
//  the basics about rules, including how they're called and how data
//  can be accessed from within a rule. The second shows rules being
//  called that create new records, in turn inducing additional rules to
//  fire.

#include "gaia_clearpath.h"

using gaia::clearpath::vertex_writer;

// This ruleset provides example rules showing how rules are defined and
//  how data can be accessed within a rule. 
ruleset clearpath_rule_examples
{
    ////////////////////////////////////////////
    // Explicit rules
    // These rules fire when a record is inserted and/or modified.
    // Each rule is called once each change/insertion, with a
    //  reference to that record being passed in as a parameter.
    //
    // These rules are:
    //    on_insert()   fired when a new record is created
    //    on_update()   fired when a record or field is updated
    //    on_change()   fired when a record is created or updated

    ////////////////////
    // Record insertion
    on_insert(vertex)
    {
         std::cout << "A: Insert of vertex record with ID " 
            << vertex.id << std::endl;
    }

    on_insert(v: vertex)
    {
        // Alternative syntax for the rule parameters. This form
        //  allows using `v` as shorthand for the vertex record.
        std::cout << "B: Insert of vertex record with ID " 
            << v.id << std::endl;
    }
    // NOTE that having 2 on_insert rules for the same table results
    //  in both rules firing. Given these two rules, an insert into
    //  the vertex table would result in the output:
    //    B: Insert of record with ID <...>
    //    A: Insert of record with ID <...>


    ////////////////////
    // Record updates
    // An 'on_update' rule fires whenver there is a change to the contents
    //  of a record or field.
    on_update(vertex)
    {
        // When referencing fields in a record, if the field name is
        //  unique then it can be used directly, w/o specifying
        //  the table (e.g., 'deprecation_count') while if a record
        //  occurs in different tables (e.g., 'id') then the table
        //  must be specified.
        std::cout << "Vertex " << vertex.id << " has deprecation count of "
            << deprecation_count << std::endl;
    }

    // Update rules can be for records or for specific fields within a
    //  record. For example, here's a rule strictly for the vertex
    //  'confidence' field.
    on_update(vertex.confidence)
    {
        std::cout << "Vertex " << vertex.id << " has changed to "
            << vertex.confidence << std::endl;
    }


    ////////////////////
    // Record change (i.e., insertion or update)
    on_change(point_edge)
    {
        // Fired for any change or update to the point_edge table.
        std::cout << "Point edge " << point_edge.id << " has changed\n";
    }


    ////////////////////////////////////////////
    // Using tags
    // Tags are a form of shorthand letting you use a shorter label
    //  to describe a longer table or field name. In the contexts of
    //  'for' loops and 'on_xxxxxx()' functions, a tag is defined
    //  by placing it before a colon, e.g., <tag>:<table|field>. E.g.,

    // Use the tag 'pe' for the table name 'point_edge'.
    on_change(pe: point_edge)
    {
        std::cout << "Point edge (pe) " << pe.id << " has changed\n";
    }


    ////////////////////////////////////////////
    // Following references between tables
    // The symbol "->"
    // The field in a record is accessed using <record>.<field>. When
    //  following the reference to another table, the "->" operator
    //  is used. For example (table)->(referenced table). 

    on_change(v: vertex)
    {
        std::cout << "Vertex " << v.id << " is part of graph "
            << v->graph.uuid << std::endl;
    }

     
    ////////////////////
    // Iterating through a 1:n relationship
    // 
    // This example combines tags and following references between
    //  tables to list the entries in B that is liked to by table A
    //  as a result in changes to table A.

    on_update(graph)   // Graph record has changed.
    {
        // Iterate through graph record's vertices. This is done with 
        // a 'for' loop over the graph's 'vertices' reference.
        std::cout << "Graph " << graph.uuid << " vertices:\n";
        for (graph.vertices->vertex)
        {
            std::cout << "  " << vertex.id << " has confidence " 
                << vertex.confidence << std::endl;
        }
    }

    // Here's an example of the preceding function using tags
    on_update(g: graph)   // Graph record 'g' has changed.
    {
        std::cout << "Graph " << g.uuid << " vertices:\n";
        for (g.vertices->v:vertex)
        {
            std::cout << "  " << v.id << " has confidence " 
                << v.confidence << std::endl;
        }
    }
}


// Rule examples where the creates other records.
ruleset event_rule_example
{
    // When a new graph record is inserted, create a vertex.
    // Note that the newly created vertex will induce the
    //  "on_insert(vertex)" rule(s) to fire.
    on_insert(graph)
    {
        int64_t vertex_id = random();
        std::cout << "Graph " << graph.uuid << " creating vertex with ID "
            << vertex_id << std::endl;
        // Create a new vertex record
        vertex.insert(
            id: vertex_id,
            deprecation_count: 0
            );
    }

//    // Here's an example with slightly more processing. The paradigm here
    //  is that incoming data has arrived, and that arrival in turn
    //  resulted in an entry being created in the incoming_data_event
    //  table, storing that data.
    // For this example, the data stored in this event is used to
    //  create a new vertex. In the process, the vertex table is scanned
    //  to find then next lowest ID, showing how to traverse an entire
    //  table.
    on_insert(incoming_data_event)
    {
        // The loop below finds the maximum id value for existing edge ids.
        // In practice, we wouldn't search the table each time to look for
        //  a new ID. This is only done to provide an example of searching
        //  a table.
        // Note that this uses a new syntax, modified from the 'tag'
        //  syntax described above. In this case the leading slash '/' means
        //  to search through all records in the specified table.
        uint64_t max_vertex_id = 0;
        for (/V:vertex)
        {
            if (V.id > max_vertex_id)
            {
                max_vertex_id = V.id;
            }
        }
        // Here is an alternative way to generate a record. The above
        //  example used the "Direct Access" technique, which works
        //  both in rules files and also in procedural C++ code. The
        //  alternative here can be used in rules files, creating a
        //  record with one function call.
        std::string graph_uuid_string("aaaaaaaa-0000-0000-0000-000000000000");
        auto new_vertex = vertex.insert(
            id: max_vertex_id + 1,
            source: incoming_data_event.source,
            data: incoming_data_event.data,
            pose_x: incoming_data_event.pose_x,
            pose_y: incoming_data_event.pose_y,
            graph_uuid: graph_uuid_string.c_str()
            );

    }
}

